package libaudit

//fieldLookupMap if for interpreting field names in audit messages for their integer values
var fieldLookupMap = map[string]fieldType{
	"auid":           typeUID,
	"uid":            typeUID,
	"euid":           typeUID,
	"suid":           typeUID,
	"fsuid":          typeUID,
	"ouid":           typeUID,
	"oauid":          typeUID,
	"iuid":           typeUID,
	"id":             typeUID,
	"inode_uid":      typeUID,
	"sauid":          typeUID,
	"obj_uid":        typeUID,
	"obj_gid":        typeGID,
	"gid":            typeGID,
	"egid":           typeGID,
	"sgid":           typeGID,
	"fsgid":          typeGID,
	"ogid":           typeGID,
	"igid":           typeGID,
	"inode_gid":      typeGID,
	"new_gid":        typeGID,
	"syscall":        typeSyscall,
	"arch":           typeArch,
	"exit":           typeExit,
	"path":           typeEscaped,
	"comm":           typeEscaped,
	"exe":            typeEscaped,
	"file":           typeEscaped,
	"name":           typeEscaped,
	"watch":          typeEscaped,
	"cwd":            typeEscaped,
	"cmd":            typeEscaped,
	"acct":           typeEscaped,
	"dir":            typeEscaped,
	"key":            typeEscaped,
	"vm":             typeEscaped,
	"old-disk":       typeEscaped,
	"new-disk":       typeEscaped,
	"old-fs":         typeEscaped,
	"new-fs":         typeEscaped,
	"device":         typeEscaped,
	"cgroup":         typeEscaped,
	"perm":           typePerm,
	"perm_mask":      typePerm,
	"mode":           typeMode,
	"saddr":          typeSockaddr,
	"prom":           typePromisc,
	"old_prom":       typePromisc,
	"capability":     typeCapability,
	"res":            typeSuccess,
	"result":         typeSuccess,
	"a0":             typeA0,
	"a1":             typeA1,
	"a2":             typeA2,
	"a3":             typeA3,
	"sig":            typeSignal,
	"list":           typeList,
	"data":           typeTTYData,
	"ses":            typeSession,
	"cap_pi":         typeCapBitmap,
	"cap_pe":         typeCapBitmap,
	"cap_pp":         typeCapBitmap,
	"cap_fi":         typeCapBitmap,
	"cap_fp":         typeCapBitmap,
	"fp":             typeCapBitmap,
	"fi":             typeCapBitmap,
	"fe":             typeCapBitmap,
	"old_pp":         typeCapBitmap,
	"old_pi":         typeCapBitmap,
	"old_pe":         typeCapBitmap,
	"new_pp":         typeCapBitmap,
	"new_pi":         typeCapBitmap,
	"new_pe":         typeCapBitmap,
	"family":         typeNFProto,
	"icmptype":       typeICMP,
	"proto":          typeProtocol,
	"addr":           typeAddr,
	"apparmor":       typeEscaped,
	"operation":      typeEscaped,
	"denied_mask":    typeEscaped,
	"info":           typeEscaped,
	"profile":        typeEscaped,
	"requested_mask": typeEscaped,
	"per":            typePersonality,
	"code":           typeSeccomp,
	"old-rng":        typeEscaped,
	"new-rng":        typeEscaped,
	"oflag":          typeOFlag,
	"ocomm":          typeEscaped,
	"flags":          typeMmap,
	"sigev_signo":    typeEscaped,
	"subj":           typeMacLabel,
	"obj":            typeMacLabel,
	"scontext":       typeMacLabel,
	"tcontext":       typeMacLabel,
	"vm-ctx":         typeMacLabel,
	"img-ctx":        typeMacLabel,
	"proctitle":      typeProctile,
	"grp":            typeEscaped,
	"new_group":      typeEscaped,
}

// following maps are not moved to headers as the keys are audit constants

//actionLookup is for mapping audit actions applied on auditRuleData
var actionLookup = map[int]string{
	AUDIT_NEVER:    "never",
	AUDIT_POSSIBLE: "possible",
	AUDIT_ALWAYS:   "always",
}

//flagLookup is for mapping flags applied on auditRuleData
var flagLookup = map[int]string{
	AUDIT_FILTER_TASK:    "task",
	AUDIT_FILTER_ENTRY:   "entry",
	AUDIT_FILTER_EXIT:    "exit",
	AUDIT_FILTER_USER:    "user",
	AUDIT_FILTER_EXCLUDE: "exclude",
}

//opLookup is for mapping operators applied on auditRuleData
var opLookup = map[int]string{
	AUDIT_EQUAL:                 "=",
	AUDIT_NOT_EQUAL:             "!=",
	AUDIT_GREATER_THAN:          ">",
	AUDIT_GREATER_THAN_OR_EQUAL: ">=",
	AUDIT_LESS_THAN:             "<",
	AUDIT_LESS_THAN_OR_EQUAL:    "<=",
	AUDIT_BIT_MASK:              "&",
	AUDIT_BIT_TEST:              "&=",
}

//opLookup is for mapping fields applied on auditRuleData and also used for interpreting
//fields set in auditRuleData struct
var fieldLookup = map[int]string{
	AUDIT_PID:      "pid",
	AUDIT_UID:      "uid",
	AUDIT_EUID:     "euid",
	AUDIT_SUID:     "suid",
	AUDIT_FSUID:    "fsuid",
	AUDIT_GID:      "gid",
	AUDIT_EGID:     "egid",
	AUDIT_SGID:     "sgid",
	AUDIT_FSGID:    "fsgid",
	AUDIT_LOGINUID: "auid",
	// AUDIT_LOGINUID:     "loginuid",
	AUDIT_PERS:          "pers",
	AUDIT_ARCH:          "arch",
	AUDIT_MSGTYPE:       "msgtype",
	AUDIT_SUBJ_USER:     "subj_user",
	AUDIT_SUBJ_ROLE:     "subj_role",
	AUDIT_SUBJ_TYPE:     "subj_type",
	AUDIT_SUBJ_SEN:      "subj_sen",
	AUDIT_SUBJ_CLR:      "subj_clr",
	AUDIT_PPID:          "ppid",
	AUDIT_OBJ_USER:      "obj_user",
	AUDIT_OBJ_ROLE:      "obj_role",
	AUDIT_OBJ_TYPE:      "obj_type",
	AUDIT_OBJ_LEV_LOW:   "obj_lev_low",
	AUDIT_OBJ_LEV_HIGH:  "obj_lev_high",
	AUDIT_DEVMAJOR:      "devmajor",
	AUDIT_DEVMINOR:      "devminor",
	AUDIT_INODE:         "inode",
	AUDIT_EXIT:          "exit",
	AUDIT_SUCCESS:       "success",
	AUDIT_WATCH:         "path",
	AUDIT_PERM:          "perm",
	AUDIT_DIR:           "dir",
	AUDIT_FILETYPE:      "filetype",
	AUDIT_OBJ_UID:       "obj_uid",
	AUDIT_OBJ_GID:       "obj_gid",
	AUDIT_FIELD_COMPARE: "field_compare",
	AUDIT_ARG0:          "a0",
	AUDIT_ARG1:          "a1",
	AUDIT_ARG2:          "a2",
	AUDIT_ARG3:          "a3",
	AUDIT_FILTERKEY:     "key",
	AUDIT_EXE:           "exe",
}
